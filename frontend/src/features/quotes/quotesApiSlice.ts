// Need to use the React-specific entry point to import `createApi`
import { createAppSlice } from "@/app/createAppSlice"
import { PayloadAction } from "@reduxjs/toolkit"
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"

interface Quote {
  id: number
  quote: string
  author: string
}

interface QuotesApiResponse {
  quotes: Quote[]
  total: number
  skip: number
  limit: number
}

export interface NumberOfQuotesState {
  value: number
}

const initialState: NumberOfQuotesState = {
  value: 5
}

// If you are not using async thunks you can use the standalone `createSlice`.
export const quoteLimitSlice = createAppSlice({
  name: "quotesLimit",
  // `createSlice` will infer the state type from the `initialState` argument
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: create => ({
    // Use the `PayloadAction` type to declare the contents of `action.payload`
    setQuoteLimit: create.reducer((state, action: PayloadAction<number>) => {
      state.value = action.payload
    })
  }),
  selectors: {
    selectQuoteLimit: counter => counter.value
  }
})

// Action creators are generated for each case reducer function.
export const { setQuoteLimit } = quoteLimitSlice.actions

// Selectors returned by `slice.selectors` take the root state as their first argument.
export const { selectQuoteLimit } = quoteLimitSlice.selectors

// Define a service using a base URL and expected endpoints
export const quotesApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "https://dummyjson.com/quotes" }),
  reducerPath: "quotesApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Quotes"],
  endpoints: build => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getQuotes: build.query<QuotesApiResponse, number>({
      query: (limit = 10) => `?limit=${limit}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Quotes", id }]
    })
  })
})

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetQuotesQuery } = quotesApiSlice
